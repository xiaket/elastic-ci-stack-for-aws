---
AWSTemplateFormatVersion: "2010-09-09"
Description: "Buildkite stack %v"

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Buildkite Configuration
        Parameters:
        - BuildkiteAgentToken
        - BuildkiteAgentTokenParameterStorePath
        - BuildkiteAgentTokenParameterStoreKMSKey
        - BuildkiteQueue

      - Label:
          default: Advanced Buildkite Configuration
        Parameters:
        - BuildkiteAgentRelease
        - BuildkiteAgentTags
        - BuildkiteAgentTimestampLines
        - BuildkiteAgentExperiments
        - BuildkiteTerminateInstanceAfterJob
        - BuildkiteAdditionalSudoPermissions
        - BuildkiteWindowsAdministrator

      - Label:
          default: Network Configuration
        Parameters:
        - VpcId
        - Subnets
        - AvailabilityZones
        - SecurityGroupId
        - AssociatePublicIpAddress

      - Label:
          default: Instance Configuration
        Parameters:
        - ImageId
        - InstanceType
        - AgentsPerInstance
        - KeyName
        - SpotPrice
        - SecretsBucket
        - ArtifactsBucket
        - AuthorizedUsersUrl
        - BootstrapScriptUrl
        - RootVolumeSize
        - RootVolumeName
        - RootVolumeType
        - ManagedPolicyARN
        - InstanceRoleName

      - Label:
          default: Auto-scaling Configuration
        Parameters:
        - MinSize
        - MaxSize
        - ScaleOutFactor
        - ScaleInIdlePeriod
        - ScaleOutForWaitingJobs
        - InstanceCreationTimeout

      - Label:
          default: Cost Allocation Configuration
        Parameters:
        - EnableCostAllocationTags
        - CostAllocationTagName
        - CostAllocationTagValue

      - Label:
          default: Docker Daemon Configuration
        Parameters:
        - EnableDockerUserNamespaceRemap
        - EnableDockerExperimental

      - Label:
          default: Docker Registry Configuration
        Parameters:
        - ECRAccessPolicy

      - Label:
          default: Plugin Configuration
        Parameters:
        - EnableSecretsPlugin
        - EnableECRPlugin
        - EnableDockerLoginPlugin

Parameters:
  KeyName:
    Description: Optional - SSH keypair used to access the buildkite instances, setting this will enable SSH ingress
    Type: String
    Default: ""

  BuildkiteAgentRelease:
    Type: String
    AllowedValues:
      - stable
      - beta
      - edge
    Default: "stable"

  BuildkiteAgentToken:
    Description: Buildkite agent registration token
    Type: String
    NoEcho: true
    Default: ""

  BuildkiteAgentTokenParameterStorePath:
    Description: AWS SSM path to the Buildkite agent registration token (this takes precedence over BuildkiteAgentToken)
    Type: String
    Default: ""

  BuildkiteAgentTokenParameterStoreKMSKey:
    Description: AWS KMS key ID used to encrypt the SSM parameter (if encrypted)
    Type: String
    Default: ""

  BuildkiteAgentTags:
    Description: Additional tags seperated by commas to provide to the agent. E.g os=linux,llamas=always
    Type: String
    Default: ""

  BuildkiteAgentTimestampLines:
    Description: Set to true to prepend timestamps to every line of output
    Type: String
    AllowedValues:
      - "true"
      - "false"
    Default: "false"

  BuildkiteAgentExperiments:
    Description: Agent experiments to enable, comma delimited. See https://github.com/buildkite/agent/blob/master/EXPERIMENTS.md.
    Type: String
    Default: ""

  BuildkiteTerminateInstanceAfterJob:
    Description: Set to "true" to terminate the instance after a job has completed.
    Type: String
    AllowedValues:
      - "true"
      - "false"
    Default: "false"

  BuildkiteAdditionalSudoPermissions:
    Description: Optional - Comma separated list of commands to allow the buildkite-agent user to run using sudo.
    Type: String
    Default: ""

  BuildkiteWindowsAdministrator:
    Description: Set to "true" to add the local "buildkite-agent" user account to the local Windows Administrator group.
    Type: String
    AllowedValues:
      - "true"
      - "false"
    Default: "true"

  BuildkiteQueue:
    Description: Queue name that agents will use, targeted in pipeline steps using "queue={value}"
    Type: String
    Default: default
    MinLength: 1

  AgentsPerInstance:
    Description: Number of Buildkite agents to run on each instance
    Type: Number
    Default: 1
    MinValue: 1

  SecretsBucket:
    Description: Optional - Name of an existing S3 bucket containing pipeline secrets (Created if left blank)
    Type: String
    Default: ""

  ArtifactsBucket:
    Description: Optional - Name of an existing S3 bucket for build artifact storage
    Type: String
    Default: ""

  BootstrapScriptUrl:
    Description: Optional - HTTPS or S3 URL to run on each instance during boot
    Type: String
    Default: ""

  AuthorizedUsersUrl:
    Description: Optional - HTTPS or S3 URL to periodically download ssh authorized_keys from, setting this will enable SSH ingress
    Type: String
    Default: ""

  VpcId:
    Type: String
    Description: Optional - Id of an existing VPC to launch instances into. Leave blank to have a new VPC created
    Default: ""

  Subnets:
    Type: CommaDelimitedList
    Description: Optional - Comma separated list of two existing VPC subnet ids where EC2 instances will run. Required if setting VpcId.
    Default: ""

  AvailabilityZones:
    Type: CommaDelimitedList
    Description: Optional - Comma separated list of AZs that subnets are created in (if Subnets parameter is not specified)
    Default: ""

  InstanceType:
    Description: Instance type
    Type: String
    Default: t2.nano
    MinLength: 1

  SpotPrice:
    Description: Spot bid price to use for the instances. 0 means normal (non-spot) instances
    Type: String
    Default: 0

  MaxSize:
    Description: Maximum number of instances
    Type: Number
    Default: 10
    MinValue: 1

  MinSize:
    Description: Minimum number of instances
    Type: Number
    Default: 0

  ScaleOutFactor:
    Description: A decimal factor to apply to scale out changes to speed up or slow down scale-out
    Type: Number
    Default: 1.0

  ScaleInIdlePeriod:
    Description: Number of seconds an agent must be idle before terminating
    Type: Number
    Default: 600

  ScaleOutForWaitingJobs:
    Type: String
    Description: Whether to scale-out for steps behind wait steps. Make sure you have a long enough idle period!
    AllowedValues:
      - "true"
      - "false"
    Default: "false"

  InstanceCreationTimeout:
    Description: Timeout period for Autoscaling Group Creation Policy
    Type: String
    Default: ""

  RootVolumeSize:
    Description: Size of each instance's root EBS volume (in GB)
    Type: Number
    Default: 250
    MinValue: 10

  RootVolumeName:
    Description: Name of the root block device for your AMI
    Type: String
    Default: ""

  RootVolumeType:
    Description: Type of root volume to use
    Type: String
    Default: "gp2"

  SecurityGroupId:
    Type: String
    Description: Optional - Security group id to assign to instances
    Default: ""

  ImageId:
    Type: String
    Description: Optional - Custom AMI to use for instances (must be based on the stack's AMI)
    Default: ""

  ManagedPolicyARN:
    Type: CommaDelimitedList
    Description: Optional - Comma separated list of managed IAM policy ARNs to attach to the instance role
    Default: ""

  InstanceRoleName:
    Type: String
    Description: Optional - A name for the IAM Role attached to the Instance Profile
    Default: ""

  InstanceOperatingSystem:
    Type: String
    Description: The operating system to run on the instances
    AllowedValues:
      - linux
      - windows
    Default: "linux"

  ECRAccessPolicy:
    Type: String
    Description: ECR access policy to give container instances
    AllowedValues:
      - none
      - readonly
      - poweruser
      - full
    Default: "none"

  AssociatePublicIpAddress:
    Type: String
    Description: Associate instances with public IP addresses
    AllowedValues:
      - "true"
      - "false"
    Default: "true"

  EnableSecretsPlugin:
    Type: String
    Description: Enables s3-secrets plugin for all pipelines
    AllowedValues:
      - "true"
      - "false"
    Default: "true"

  EnableECRPlugin:
    Type: String
    Description: Enables ecr plugin for all pipelines
    AllowedValues:
      - "true"
      - "false"
    Default: "true"

  EnableDockerLoginPlugin:
    Type: String
    Description: Enables docker-login plugin for all pipelines
    AllowedValues:
      - "true"
      - "false"
    Default: "true"

  EnableDockerUserNamespaceRemap:
    Type: String
    Description: Enables Docker user namespace remapping so docker runs as buildkite-agent
    AllowedValues:
      - "true"
      - "false"
    Default: "true"

  EnableDockerExperimental:
    Type: String
    Description: Enables Docker experimental features
    AllowedValues:
      - "true"
      - "false"
    Default: "false"

  EnableCostAllocationTags:
    Type: String
    Description: Enables AWS Cost Allocation tags for all resources in the stack. See https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html
    AllowedValues:
      - "true"
      - "false"
    Default: "false"

  CostAllocationTagName:
    Type: String
    Description: The name of the Cost Allocation Tag used for billing purposes
    Default: "aws:createdBy"

  CostAllocationTagValue:
    Type: String
    Description: The value of the Cost Allocation Tag used for billing purposes
    Default: "buildkite-elastic-ci-stack-for-aws"

  EnableAgentGitMirrorsExperiment:
    Type: String
    Description: Enables the git-mirrors experiment in the agent
    AllowedValues:
      - "true"
      - "false"
    Default: "false"

Outputs:
  VpcId:
    Value:
      !If [ CreateVpcResources, !Ref Vpc, !Ref VpcId ]
    Export:
      Name: !Sub '${AWS::StackName}-VpcId'

  ManagedSecretsBucket:
    Value:
      !If [ CreateSecretsBucket, !Ref ManagedSecretsBucket, "Undefined" ]
    Export:
      Name: !Sub '${AWS::StackName}-ManagedSecretsBucket'

  ManagedSecretsLoggingBucket:
    Value:
      !If [ CreateSecretsBucket, !Ref ManagedSecretsLoggingBucket, "Undefined" ]
    Export:
      Name: !Sub '${AWS::StackName}-ManagedSecretsLoggingBucket'

  AutoScalingGroupName:
    Value: !Ref AgentAutoScaleGroup
    Export:
      Name: !Sub '${AWS::StackName}-AutoScalingGroupName'

  InstanceRoleName:
    Value: !Ref IAMRole
    Export:
      Name: !Sub '${AWS::StackName}-InstanceRoleName'

Conditions:
    UseSpotInstances:
      !Not [ !Equals [ !Ref SpotPrice, 0 ] ]

    CreateVpcResources:
      !Equals [ !Ref VpcId, "" ]

    CreateSecurityGroup:
      !Equals [ !Ref SecurityGroupId, "" ]

    CreateSecretsBucket:
      !Equals [ !Ref SecretsBucket, "" ]

    SetInstanceRoleName:
      !Not [ !Equals [ !Ref InstanceRoleName, "" ] ]

    UseSpecifiedSecretsBucket:
      !Not [ !Equals [ !Ref SecretsBucket, "" ] ]

    UseSpecifiedAvailabilityZones:
      !Not [ !Equals [ !Join [ "", !Ref AvailabilityZones ], "" ]  ]

    UseArtifactsBucket:
      !Not [ !Equals [ !Ref ArtifactsBucket, "" ] ]

    UseDefaultAMI:
      !Equals [ !Ref ImageId, "" ]

    UseDefaultInstanceCreationTimeout:
      !Equals [ !Ref InstanceCreationTimeout, "" ]

    UseDefaultRootVolumeName:
      !Equals [ !Ref RootVolumeName, "" ]

    UseManagedPolicyARN:
      !Not [ !Equals [ !Join [ "", !Ref ManagedPolicyARN ], "" ] ]

    UseECR:
      !Not [ !Equals [ !Ref ECRAccessPolicy, "none" ] ]

    UseSSMAgentToken:
      !Not [ !Equals [ !Ref BuildkiteAgentTokenParameterStorePath, "" ] ]

    UseCustomerManagedKeyForParameterStore:
      !Not [ !Equals [ !Ref BuildkiteAgentTokenParameterStoreKMSKey, "" ] ]

    HasVariableSize:
      !Not [ !Equals [ !Ref MaxSize, !Ref MinSize ] ]

    UseCostAllocationTags:
      !Equals [ !Ref EnableCostAllocationTags, "true" ]

    HasKeyName:
      !Not [ !Equals [ !Ref KeyName, "" ] ]

    EnableSshIngress:
      !And
        - { Condition : CreateSecurityGroup }
        # Enable ingress if a key can be specified another way
        - !Or
          - { Condition: HasKeyName }
          - !Not [ !Equals [ !Ref AuthorizedUsersUrl, "" ] ]

    # Whether or not there's any managed polices to attach
    HasManagedPolicies:
      !Or [ { Condition: UseManagedPolicyARN }, { Condition: UseECR } ]

    UseWindowsAgents:
      !Equals [ !Ref InstanceOperatingSystem, "windows" ]

    UseLinuxAgents:
      !Equals [ !Ref InstanceOperatingSystem, "linux" ]

Mappings:
  ECRManagedPolicy:
    none      : { Policy: '' }
    readonly  : { Policy: 'arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly' }
    poweruser : { Policy: 'arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser' }
    full      : { Policy: 'arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess' }

  LambdaBucket:
    us-east-1 : { Bucket: "buildkite-lambdas" }
    us-east-2 : { Bucket: "buildkite-lambdas-us-east-2" }
    us-west-1 : { Bucket: "buildkite-lambdas-us-west-1" }
    us-west-2 : { Bucket: "buildkite-lambdas-us-west-2" }
    ap-south-1 : { Bucket: "buildkite-lambdas-ap-south-1" }
    ap-northeast-1 : { Bucket: "buildkite-lambdas-ap-northeast-1" }
    ap-northeast-2 : { Bucket: "buildkite-lambdas-ap-northeast-2" }
    ap-southeast-1 : { Bucket: "buildkite-lambdas-ap-southeast-1" }
    ap-southeast-2 : { Bucket: "buildkite-lambdas-ap-southeast-2" }
    ca-central-1 : { Bucket: "buildkite-lambdas-ca-central-1" }
    eu-central-1 : { Bucket: "buildkite-lambdas-eu-central-1" }
    eu-west-1 : { Bucket: "buildkite-lambdas-eu-west-1" }
    eu-west-2 : { Bucket: "buildkite-lambdas-eu-west-2" }
    eu-west-3 : { Bucket: "buildkite-lambdas-eu-west-3" }
    eu-north-1 : { Bucket: "buildkite-lambdas-eu-north-1" }
    sa-east-1 : { Bucket: "buildkite-lambdas-sa-east-1" }

  # Generated from Makefile via build/mappings.yml
  AWSRegion2AMI: { linux: !Ref ImageId, windows: !Ref ImageId }

Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Condition: CreateVpcResources
    Properties:
      CidrBlock: 10.0.0.0/16
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'

  Gateway:
    Type: AWS::EC2::InternetGateway
    Condition: CreateVpcResources
    Properties:
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Condition: CreateVpcResources
    Properties:
      InternetGatewayId: !Ref Gateway
      VpcId: !Ref Vpc

  Subnet0:
    Type: AWS::EC2::Subnet
    Condition: CreateVpcResources
    Properties:
      AvailabilityZone:
        !If
          - "UseSpecifiedAvailabilityZones"
          - !Select [ 0, !Ref AvailabilityZones ]
          - !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.0.1.0/24
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'

  Subnet1:
    Type: AWS::EC2::Subnet
    Condition: CreateVpcResources
    Properties:
      AvailabilityZone:
        !If
          - "UseSpecifiedAvailabilityZones"
          - !Select [ 1, !Ref AvailabilityZones ]
          - !Select [ 1, !GetAZs '' ]
      CidrBlock: 10.0.2.0/24
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'

  Routes:
    Type: AWS::EC2::RouteTable
    Condition: CreateVpcResources
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'

  RouteDefault:
    Type: AWS::EC2::Route
    Condition: CreateVpcResources
    DependsOn: GatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref Gateway
      RouteTableId: !Ref Routes

  Subnet0Routes:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateVpcResources
    Properties:
      SubnetId: !Ref Subnet0
      RouteTableId: !Ref Routes

  Subnet1Routes:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateVpcResources
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref Routes

  # Allow ec2 instances to assume a role and be granted the IAMPolicies
  IAMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [ !Ref IAMRole ]

  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !If [ SetInstanceRoleName, !Ref InstanceRoleName, !Sub "${AWS::StackName}-Role" ]
      ManagedPolicyArns: !If
          - HasManagedPolicies
          # Support multiple policies to attach by merging the values together and splitting on ','
          - !Split
            - ','
            # Join will skip over AWS::NoValue values
            - !Join
             - ','
             - - !If
                 - UseECR
                 - !FindInMap [ ECRManagedPolicy, !Ref ECRAccessPolicy, 'Policy' ]
                 - !Ref 'AWS::NoValue'
               # This may support multiple values of its own (separated by commas)
               - !If
                 - UseManagedPolicyARN
                 - !Join [ ',', !Ref ManagedPolicyARN ]
                 - !Ref 'AWS::NoValue'
          - !Ref 'AWS::NoValue'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ autoscaling.amazonaws.com, ec2.amazonaws.com ]
            Action: sts:AssumeRole
      Path: /

  IAMPolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: InstancePolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - cloudwatch:PutMetricData
              - cloudformation:DescribeStackResource
              - ec2:DescribeTags
              - autoscaling:DescribeAutoScalingInstances
              - autoscaling:SetInstanceHealth
              - autoscaling:TerminateInstanceInAutoScalingGroup
            Resource: "*"
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogStreams
            Resource: "*"
          - Effect: Allow
            Action:
              - sqs:*
              - sns:Unsubscribe
              - sns:Subscribe
            Resource: "*"
          - Effect: Allow
            Action:
              - ssm:DescribeInstanceProperties       
              - ssm:ListAssociations
              - ssm:PutInventory
              - ssm:UpdateInstanceInformation
              - ssmmessages:CreateControlChannel
              - ssmmessages:CreateDataChannel          
              - ssmmessages:OpenControlChannel
              - ssmmessages:OpenDataChannel
      Roles:
        - !Ref IAMRole

  ManagedSecretsLoggingBucket:
    Type: AWS::S3::Bucket
    Condition: CreateSecretsBucket
    DeletionPolicy: Retain
    Properties:
      AccessControl: LogDeliveryWrite
      Tags:
        - !If
          - UseCostAllocationTags
          - Key: !Ref CostAllocationTagName
            Value: !Ref CostAllocationTagValue
          - !Ref "AWS::NoValue"

  ManagedSecretsBucket:
    Type: AWS::S3::Bucket
    Condition: CreateSecretsBucket
    DeletionPolicy: Retain
    Properties:
      LoggingConfiguration:
        DestinationBucketName: !Ref ManagedSecretsLoggingBucket
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - !If
          - UseCostAllocationTags
          - Key: !Ref CostAllocationTagName
            Value: !Ref CostAllocationTagValue
          - !Ref "AWS::NoValue"

  ManagedSecretsBucketPolicy:
    Type: AWS::IAM::Policy
    Condition: CreateSecretsBucket
    Properties:
      PolicyName: SecretsBucketPolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - s3:Get*
              - s3:Get
              - s3:List*
            Resource:
              - !Sub "arn:aws:s3:::${ManagedSecretsBucket}/*"
              - !Sub "arn:aws:s3:::${ManagedSecretsBucket}"
      Roles:
        - !Ref IAMRole

  UnmanagedSecretsBucketPolicy:
    Type: AWS::IAM::Policy
    Condition: UseSpecifiedSecretsBucket
    Properties:
      PolicyName: SecretsBucketPolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - s3:Get*
              - s3:Get
              - s3:List*
            Resource:
              - !Sub "arn:aws:s3:::${SecretsBucket}/*"
              - !Sub "arn:aws:s3:::${SecretsBucket}"
      Roles:
        - !Ref IAMRole

  ArtifactsBucketPolicies:
    Type: AWS::IAM::Policy
    Condition: UseArtifactsBucket
    Properties:
      PolicyName: ArtifactsBucketPolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:GetObjectAcl
              - s3:GetObjectVersion
              - s3:GetObjectVersionAcl
              - s3:ListBucket
              - s3:PutObject
              - s3:PutObjectAcl
              - s3:PutObjectVersionAcl
            Resource:
              - !Sub "arn:aws:s3:::${ArtifactsBucket}/*"
              - !Sub "arn:aws:s3:::${ArtifactsBucket}"
      Roles:
        - !Ref IAMRole

  AgentLaunchTemplate:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateData:
          NetworkInterfaces:
            - DeviceIndex: 0
              AssociatePublicIpAddress: { Ref: AssociatePublicIpAddress }
              Groups:
              - !If [ "CreateSecurityGroup", !Ref SecurityGroup, !Ref SecurityGroupId ]
          KeyName: !If [ "HasKeyName", !Ref KeyName, !Ref 'AWS::NoValue' ]
          IamInstanceProfile:
            Arn: !GetAtt "IAMInstanceProfile.Arn"
          InstanceType: !Ref InstanceType
          InstanceMarketOptions: !If
            - UseSpotInstances
            - MarketType: spot
              SpotOptions:
                MaxPrice: !Ref SpotPrice
            - !Ref "AWS::NoValue"
          ImageId: !If [ UseDefaultAMI, !FindInMap [ AWSRegion2AMI, !Ref 'AWS::Region', !Ref InstanceOperatingSystem ], !Ref ImageId ]
          BlockDeviceMappings:
            - DeviceName: !If [ UseDefaultRootVolumeName, !If [ UseWindowsAgents, /dev/sda1, /dev/xvda ], !Ref RootVolumeName ]
              Ebs: { VolumeSize: !Ref RootVolumeSize, VolumeType: !Ref RootVolumeType }
          TagSpecifications:
            - ResourceType: instance
              Tags:
                - Key: Role
                  Value: buildkite-agent
                - Key: Name
                  Value: buildkite-agent
                - Key: BuildkiteAgentRelease
                  Value: !Ref BuildkiteAgentRelease
                - Key: BuildkiteQueue
                  Value: !Ref BuildkiteQueue
                - !If
                  - UseCostAllocationTags
                  - Key: !Ref CostAllocationTagName
                    Value: !Ref CostAllocationTagValue
                  - !Ref "AWS::NoValue"
          UserData:
            Fn::Base64: !If
              - UseWindowsAgents
              - !Sub
                - |
                  <powershell>
                  $Env:DOCKER_USERNS_REMAP="${EnableDockerUserNamespaceRemap}"
                  $Env:DOCKER_EXPERIMENTAL="${EnableDockerExperimental}"
                  powershell -file C:\buildkite-agent\bin\bk-configure-docker.ps1 >> C:\buildkite-agent\elastic-stack.log

                  $Env:BUILDKITE_STACK_NAME="${AWS::StackName}"
                  $Env:BUILDKITE_STACK_VERSION="%v"
                  $Env:BUILDKITE_SCALE_IN_IDLE_PERIOD="${ScaleInIdlePeriod}"
                  $Env:BUILDKITE_SECRETS_BUCKET="${LocalSecretsBucket}"
                  $Env:BUILDKITE_AGENT_TOKEN="${BuildkiteAgentToken}"
                  $Env:BUILDKITE_AGENT_TOKEN_PATH="${BuildkiteAgentTokenParameterStorePath}"
                  $Env:BUILDKITE_AGENTS_PER_INSTANCE="${AgentsPerInstance}"
                  $Env:BUILDKITE_AGENT_TAGS="${BuildkiteAgentTags}"
                  $Env:BUILDKITE_AGENT_TIMESTAMP_LINES="${BuildkiteAgentTimestampLines}"
                  $Env:BUILDKITE_AGENT_EXPERIMENTS="${BuildkiteAgentExperiments}"
                  $Env:BUILDKITE_AGENT_RELEASE="${BuildkiteAgentRelease}"
                  $Env:BUILDKITE_QUEUE="${BuildkiteQueue}"
                  $Env:BUILDKITE_AGENT_ENABLE_GIT_MIRRORS_EXPERIMENT="${EnableAgentGitMirrorsExperiment}"
                  $Env:BUILDKITE_ELASTIC_BOOTSTRAP_SCRIPT="${BootstrapScriptUrl}"
                  $Env:BUILDKITE_AUTHORIZED_USERS_URL="${AuthorizedUsersUrl}"
                  $Env:BUILDKITE_ECR_POLICY="${ECRAccessPolicy}"
                  $Env:BUILDKITE_TERMINATE_INSTANCE_AFTER_JOB="${BuildkiteTerminateInstanceAfterJob}"
                  $Env:BUILDKITE_ADDITIONAL_SUDO_PERMISSIONS="${BuildkiteAdditionalSudoPermissions}"
                  $Env:BUILDKITE_WINDOWS_ADMINISTRATOR="${BuildkiteWindowsAdministrator}"
                  $Env:AWS_DEFAULT_REGION="${AWS::Region}"
                  $Env:SECRETS_PLUGIN_ENABLED="${EnableSecretsPlugin}"
                  $Env:ECR_PLUGIN_ENABLED="${EnableECRPlugin}"
                  $Env:DOCKER_LOGIN_PLUGIN_ENABLED="${EnableDockerLoginPlugin}"
                  $Env:AWS_REGION="${AWS::Region}"
                  powershell -file C:\buildkite-agent\bin\bk-install-elastic-stack.ps1 >> C:\buildkite-agent\elastic-stack.log
                  </powershell>
                - {
                    LocalSecretsBucket: !If [ CreateSecretsBucket, !Ref ManagedSecretsBucket, !Ref SecretsBucket ],
                  }
              - !Sub
                - |
                  Content-Type: multipart/mixed; boundary="==BOUNDARY=="
                  MIME-Version: 1.0
                  --==BOUNDARY==
                  Content-Type: text/cloud-boothook; charset="us-ascii"
                  DOCKER_USERNS_REMAP=${EnableDockerUserNamespaceRemap} \
                  DOCKER_EXPERIMENTAL=${EnableDockerExperimental} \
                    /usr/local/bin/bk-configure-docker.sh
                  --==BOUNDARY==
                  Content-Type: text/x-shellscript; charset="us-ascii"
                  #!/bin/bash -xv
                  BUILDKITE_STACK_NAME="${AWS::StackName}" \
                  BUILDKITE_STACK_VERSION=%v \
                  BUILDKITE_SCALE_IN_IDLE_PERIOD=${ScaleInIdlePeriod} \
                  BUILDKITE_SECRETS_BUCKET="${LocalSecretsBucket}" \
                  BUILDKITE_AGENT_TOKEN="${BuildkiteAgentToken}" \
                  BUILDKITE_AGENT_TOKEN_PATH="${BuildkiteAgentTokenParameterStorePath}" \
                  BUILDKITE_AGENTS_PER_INSTANCE="${AgentsPerInstance}" \
                  BUILDKITE_AGENT_TAGS="${BuildkiteAgentTags}" \
                  BUILDKITE_AGENT_TIMESTAMP_LINES="${BuildkiteAgentTimestampLines}" \
                  BUILDKITE_AGENT_EXPERIMENTS="${BuildkiteAgentExperiments}" \
                  BUILDKITE_AGENT_RELEASE="${BuildkiteAgentRelease}" \
                  BUILDKITE_QUEUE="${BuildkiteQueue}" \
                  BUILDKITE_AGENT_ENABLE_GIT_MIRRORS_EXPERIMENT=${EnableAgentGitMirrorsExperiment} \
                  BUILDKITE_ELASTIC_BOOTSTRAP_SCRIPT="${BootstrapScriptUrl}" \
                  BUILDKITE_AUTHORIZED_USERS_URL="${AuthorizedUsersUrl}" \
                  BUILDKITE_ECR_POLICY=${ECRAccessPolicy} \
                  BUILDKITE_TERMINATE_INSTANCE_AFTER_JOB=${BuildkiteTerminateInstanceAfterJob} \
                  BUILDKITE_ADDITIONAL_SUDO_PERMISSIONS=${BuildkiteAdditionalSudoPermissions} \
                  AWS_DEFAULT_REGION=${AWS::Region} \
                  SECRETS_PLUGIN_ENABLED=${EnableSecretsPlugin} \
                  ECR_PLUGIN_ENABLED=${EnableECRPlugin} \
                  DOCKER_LOGIN_PLUGIN_ENABLED=${EnableDockerLoginPlugin} \
                  AWS_REGION=${AWS::Region} \
                    /usr/local/bin/bk-install-elastic-stack.sh
                  --==BOUNDARY==--
                - {
                    LocalSecretsBucket: !If [ CreateSecretsBucket, !Ref ManagedSecretsBucket, !Ref SecretsBucket ],
                  }

  AgentAutoScaleGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !If [ "CreateVpcResources", [ !Ref Subnet0, !Ref Subnet1 ], !Ref Subnets ]
      LaunchTemplate:
        LaunchTemplateId: !Ref AgentLaunchTemplate
        Version: !GetAtt "AgentLaunchTemplate.LatestVersionNumber"
      MinSize: !Ref MinSize
      MaxSize: !Ref MaxSize
      Cooldown: 0
      MetricsCollection:
        - Granularity: 1Minute
          Metrics:
            - GroupMinSize
            - GroupMaxSize
            - GroupInServiceInstances
            - GroupTerminatingInstances
            - GroupPendingInstances
      TerminationPolicies:
        - OldestLaunchConfiguration
        - ClosestToNextInstanceHour
    CreationPolicy:
      ResourceSignal:
        Timeout: !If [ UseDefaultInstanceCreationTimeout, !If [ UseWindowsAgents, PT10M, PT5M ], !Ref InstanceCreationTimeout ]
        Count: !Ref MinSize
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateSecurityGroup
    Properties:
      GroupDescription: Enable access to agents
      VpcId: !If [ "CreateVpcResources",  !Ref Vpc, !Ref VpcId ]
      Tags:
      - Key: Name
        Value: !Ref 'AWS::StackName'

  SecurityGroupSshIngress:
    Condition: EnableSshIngress
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt SecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: 0.0.0.0/0

  AutoscalingLambdaExecutionRole:
    Type: AWS::IAM::Role
    Condition: HasVariableSize
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AutoScalingGroups
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - autoscaling:DescribeAutoScalingGroups
                - autoscaling:SetDesiredCapacity
              Resource: '*'
        - !If
            - UseCustomerManagedKeyForParameterStore
            - - PolicyName: DecryptAgentToken
                PolicyDocument:
                  Version: '2012-10-17'
                  Statement:
                  - Effect: Allow
                    Action:
                      - kms:Decrypt
                    Resource: !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${BuildkiteAgentTokenParameterStoreKMSKey}
              - PolicyName: ReadAgentToken
                PolicyDocument:
                  Version: '2012-10-17'
                  Statement:
                  - Effect: Allow
                    Action:
                      - ssm:GetParameter
                    Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${BuildkiteAgentTokenParameterStorePath}
            - !Ref 'AWS::NoValue'
        - PolicyName: WriteCloudwatchMetrics
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - cloudwatch:PutMetricData
              Resource: '*'

  # This mirrors the group that would be created by the lambda, but enforces
  # a retention period and also ensures it's removed when the stack is removed
  AutoscalingLogGroup:
    Type: "AWS::Logs::LogGroup"
    Condition: HasVariableSize
    Properties:
      LogGroupName: !Join ["/", ["/aws/lambda", !Ref AutoscalingFunction]]
      RetentionInDays: 1

  AutoscalingFunction:
    Type: AWS::Lambda::Function
    Condition: HasVariableSize
    Properties:
      Code:
        S3Bucket: { 'Fn::FindInMap': [LambdaBucket, !Ref 'AWS::Region', 'Bucket'] }
        S3Key: "buildkite-agent-scaler/v1.0.0/handler.zip"
      Role: !GetAtt AutoscalingLambdaExecutionRole.Arn
      Timeout: 120
      Handler: handler
      Runtime: go1.x
      MemorySize: 128
      Environment:
        Variables:
          BUILDKITE_AGENT_TOKEN: !If [ UseSSMAgentToken, !Ref 'AWS::NoValue', !Ref BuildkiteAgentToken ]
          BUILDKITE_AGENT_TOKEN_SSM_KEY: !Ref BuildkiteAgentTokenParameterStorePath
          BUILDKITE_QUEUE:       !Ref BuildkiteQueue
          AGENTS_PER_INSTANCE:   !Ref AgentsPerInstance
          CLOUDWATCH_METRICS:    "1"
          DISABLE_SCALE_IN:      "1"
          ASG_NAME:              !Ref AgentAutoScaleGroup
          MIN_SIZE:              !Ref MinSize
          MAX_SIZE:              !Ref MaxSize
          SCALE_OUT_FACTOR:      !Ref ScaleOutFactor
          INCLUDE_WAITING:       !Ref ScaleOutForWaitingJobs
          LAMBDA_TIMEOUT:        "50s"
          LAMBDA_INTERVAL:       "10s"

  AutoscalingLambdaScheduledRule:
    Type: "AWS::Events::Rule"
    Condition: HasVariableSize
    Properties:
      Description: "ScheduledRule"
      ScheduleExpression: "rate(1 minute)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt AutoscalingFunction.Arn
          Id: "AutoscalingFunction"

  PermissionForEventsToInvokeAutoscalingLambda:
    Type: "AWS::Lambda::Permission"
    Condition: HasVariableSize
    Properties:
      FunctionName: !Ref AutoscalingFunction
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt AutoscalingLambdaScheduledRule.Arn
